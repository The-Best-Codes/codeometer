#!/bin/bash

# ANSI color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[1;34m'
MAGENTA='\033[1;35m'
CYAN='\033[1;36m'
RESET='\033[0m'

# Default settings
USE_COLORS=true
USE_FORMATTING=true
INCLUDE_HIDDEN=false
COUNT_COMMENTS=false

# Library path
LIB_PATH="/usr/local/share/codeometer/lib"

# Source library files
source "$LIB_PATH/colors.sh"
source "$LIB_PATH/formatting.sh"
source "$LIB_PATH/project_detection.sh"
source "$LIB_PATH/counter.sh"
source "$LIB_PATH/reporter.sh"

# Function to apply color if colors are enabled
apply_color() {
    if $USE_COLORS; then
        echo -ne "${!1}"
    fi
}

# Function to reset color if colors are enabled
reset_color() {
    if $USE_COLORS; then
        echo -ne "${RESET}"
    fi
}

# Function to get terminal width
get_terminal_width() {
    if $USE_FORMATTING; then
        tput cols 2>/dev/null || echo 80
    else
        echo 80
    fi
}

# Function to print centered text
print_centered() {
    if $USE_FORMATTING; then
        local text="$1"
        local width=$(get_terminal_width)
        local padding=$(((width - ${#text}) / 2))
        printf "%${padding}s%s%${padding}s\n" "" "$text" ""
    else
        echo "$1"
    fi
}

# Function to print a horizontal line
print_line() {
    if $USE_FORMATTING; then
        local width=$(get_terminal_width)
        printf '%*s\n' "$width" | tr ' ' '-'
    fi
}

# Print version
print_version() {
    echo "Codeometer version 1.2.0"
    echo "Copyright (c) 2023 Best Codes"
    echo "Licensed under the MIT License"
}

# Print usage
print_usage() {
    echo "Usage: codeometer [OPTIONS] /path/to/your/project"
    echo ""
    echo "Options:"
    echo "  --no-color       Disable colored output"
    echo "  --no-format      Disable formatted output"
    echo "  --hidden         Include hidden files and directories"
    echo "  --comments       Count and display comment statistics"
    echo "  --version        Display version information"
    echo "  --help           Display this help message"
}

# Parse command line arguments
while [[ "$#" -gt 0 ]]; do
    case $1 in
        --no-color) USE_COLORS=false ;;
        --no-format) USE_FORMATTING=false ;;
        --hidden) INCLUDE_HIDDEN=true ;;
        --comments) COUNT_COMMENTS=true ;;
        --version) print_version; exit 0 ;;
        --help) print_usage; exit 0 ;;
        -*) echo "Unknown option: $1"; print_usage; exit 1 ;;
        *) PROJECT_DIR="$1" ;;
    esac
    shift
done

# Check if a directory path is provided
if [ -z "$PROJECT_DIR" ]; then
    apply_color "RED"
    echo "Error: Please provide the path to your code project."
    reset_color
    print_usage
    exit 1
fi

# Check if the directory exists
if [ ! -d "$PROJECT_DIR" ]; then
    apply_color "RED"
    echo "Error: Directory does not exist."
    reset_color
    exit 1
fi

# Detect project type and set settings
PROJECT_TYPE=$(detect_project_type)
get_project_settings "$PROJECT_TYPE"

# Initialize variables
TOTAL_LINES=0
TOTAL_FILES=0
AUTO_GENERATED_LINES=0
AUTO_GENERATED_FILES=0
COMMENT_LINES=0

# Count total lines and files
total_extensions=$(echo $FILE_TYPES | wc -w)
current_extension=0

for ext in $FILE_TYPES; do
    current_extension=$((current_extension + 1))
    read -r lines files <<<$(count_lines_by_extension "$PROJECT_DIR" "$ext" "$INCLUDE_HIDDEN")
    TOTAL_LINES=$((TOTAL_LINES + lines))
    TOTAL_FILES=$((TOTAL_FILES + files))
    
    # Count comment lines if enabled
    if $COUNT_COMMENTS; then
        while IFS= read -r -d '' file; do
            COMMENT_LINES=$((COMMENT_LINES + $(count_comment_lines "$file" "$ext")))
        done < <(find "$PROJECT_DIR" -type f -name "*.$ext" -print0)
    fi
    
    display_progress $current_extension $total_extensions
done

echo "" # Move to the next line after the progress bar

# Count auto-generated lines and files
for dir in $AUTO_GEN_DIRS; do
    if [ -d "$PROJECT_DIR/$dir" ]; then
        for ext in $FILE_TYPES; do
            read -r lines files <<<$(count_lines_by_extension "$PROJECT_DIR/$dir" "$ext" "$INCLUDE_HIDDEN")
            AUTO_GENERATED_LINES=$((AUTO_GENERATED_LINES + lines))
            AUTO_GENERATED_FILES=$((AUTO_GENERATED_FILES + files))
        done
    fi
done

# Calculate hand-written lines and files
HAND_WRITTEN_LINES=$((TOTAL_LINES - AUTO_GENERATED_LINES))
HAND_WRITTEN_FILES=$((TOTAL_FILES - AUTO_GENERATED_FILES))

# Function to print formatted output
print_stat() {
    local category="$1"
    local lines="$2"
    local files="$3"

    if $USE_FORMATTING; then
        apply_color "MAGENTA"
        printf "%-20s" "$category"
        reset_color
        apply_color "YELLOW"
        printf "%8d" "$lines"
        reset_color
        apply_color "GREEN"
        printf "%8d\n" "$files"
        reset_color
    else
        echo "$category: $lines lines, $files files"
    fi
}

# Print the report
if $USE_FORMATTING; then
    print_line
    apply_color "BLUE"
    print_centered "Project Analysis Report"
    reset_color
    print_line
fi

apply_color "CYAN"
echo "Project Type: $PROJECT_TYPE"
reset_color
echo ""

apply_color "BLUE"
echo "Code Statistics:"
reset_color

if $USE_FORMATTING; then
    print_line
    apply_color "MAGENTA"
    printf "%-20s" "Category"
    apply_color "YELLOW"
    printf "%8s" "Lines"
    apply_color "GREEN"
    printf "%8s\n" "Files"
    reset_color
    print_line
fi

print_stat "Total:" "$TOTAL_LINES" "$TOTAL_FILES"
print_stat "Hand-written:" "$HAND_WRITTEN_LINES" "$HAND_WRITTEN_FILES"
print_stat "Auto-generated:" "$AUTO_GENERATED_LINES" "$AUTO_GENERATED_FILES"

if $USE_FORMATTING; then
    print_line
fi

# Calculate and print percentages
if [ $TOTAL_LINES -ne 0 ]; then
    HAND_PERCENT=$(awk "BEGIN {printf \"%.2f\", ($HAND_WRITTEN_LINES / $TOTAL_LINES) * 100}")
    AUTO_PERCENT=$(awk "BEGIN {printf \"%.2f\", ($AUTO_GENERATED_LINES / $TOTAL_LINES) * 100}")
else
    HAND_PERCENT="0.00"
    AUTO_PERCENT="0.00"
fi

echo ""
apply_color "BLUE"
echo "Percentages:"
reset_color
apply_color "CYAN"
echo "  Hand-written:"
reset_color
apply_color "YELLOW"
echo "    $HAND_PERCENT%"
reset_color
apply_color "CYAN"
echo "  Auto-generated:"
reset_color
apply_color "YELLOW"
echo "    $AUTO_PERCENT%"
reset_color

# Print lines by file extension
echo ""
apply_color "BLUE"
echo "Lines of code by file extension:"
reset_color
for ext in $FILE_TYPES; do
    read -r lines files <<<$(count_lines_by_extension "$PROJECT_DIR" "$ext" "$INCLUDE_HIDDEN")
    if [ "$lines" != "0" ]; then
        apply_color "CYAN"
        printf "  %-5s:" ".$ext"
        reset_color
        apply_color "YELLOW"
        printf "%8d" "$lines"
        reset_color
        echo " lines in $files files"
    fi
done

if $USE_FORMATTING; then
    print_line
fi
